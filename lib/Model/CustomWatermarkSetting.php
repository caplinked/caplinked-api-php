<?php
/**
 * CustomWatermarkSetting
 *
 * PHP version 5
 *
 * @category Class
 * @package  Caplinked
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Caplinked\Model;

use \ArrayAccess;

/**
 * CustomWatermarkSetting Class Doc Comment
 *
 * @category    Class
 * @description List custom watermarks for a team
 * @package     Caplinked
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CustomWatermarkSetting implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CustomWatermarkSetting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'watermark_id' => 'int',
        'team_id' => 'int',
        'custom_text' => 'string',
        'color' => 'string',
        'opacity' => 'float',
        'font_size' => 'int',
        'rotation' => 'int',
        'hposition' => 'string',
        'vposition' => 'string',
        'display_user_name' => 'bool',
        'display_user_email' => 'bool',
        'display_ip_address' => 'bool',
        'display_time' => 'bool',
        'display_workspace_name' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'watermark_id' => 'int32',
        'team_id' => 'int32',
        'custom_text' => null,
        'color' => null,
        'opacity' => 'float',
        'font_size' => 'int32',
        'rotation' => 'int32',
        'hposition' => null,
        'vposition' => null,
        'display_user_name' => null,
        'display_user_email' => null,
        'display_ip_address' => null,
        'display_time' => null,
        'display_workspace_name' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'watermark_id' => 'watermark_id',
        'team_id' => 'team_id',
        'custom_text' => 'custom_text',
        'color' => 'color',
        'opacity' => 'opacity',
        'font_size' => 'font_size',
        'rotation' => 'rotation',
        'hposition' => 'hposition',
        'vposition' => 'vposition',
        'display_user_name' => 'display_user_name',
        'display_user_email' => 'display_user_email',
        'display_ip_address' => 'display_ip_address',
        'display_time' => 'display_time',
        'display_workspace_name' => 'display_workspace_name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'watermark_id' => 'setWatermarkId',
        'team_id' => 'setTeamId',
        'custom_text' => 'setCustomText',
        'color' => 'setColor',
        'opacity' => 'setOpacity',
        'font_size' => 'setFontSize',
        'rotation' => 'setRotation',
        'hposition' => 'setHposition',
        'vposition' => 'setVposition',
        'display_user_name' => 'setDisplayUserName',
        'display_user_email' => 'setDisplayUserEmail',
        'display_ip_address' => 'setDisplayIpAddress',
        'display_time' => 'setDisplayTime',
        'display_workspace_name' => 'setDisplayWorkspaceName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'watermark_id' => 'getWatermarkId',
        'team_id' => 'getTeamId',
        'custom_text' => 'getCustomText',
        'color' => 'getColor',
        'opacity' => 'getOpacity',
        'font_size' => 'getFontSize',
        'rotation' => 'getRotation',
        'hposition' => 'getHposition',
        'vposition' => 'getVposition',
        'display_user_name' => 'getDisplayUserName',
        'display_user_email' => 'getDisplayUserEmail',
        'display_ip_address' => 'getDisplayIpAddress',
        'display_time' => 'getDisplayTime',
        'display_workspace_name' => 'getDisplayWorkspaceName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['watermark_id'] = isset($data['watermark_id']) ? $data['watermark_id'] : null;
        $this->container['team_id'] = isset($data['team_id']) ? $data['team_id'] : null;
        $this->container['custom_text'] = isset($data['custom_text']) ? $data['custom_text'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['opacity'] = isset($data['opacity']) ? $data['opacity'] : null;
        $this->container['font_size'] = isset($data['font_size']) ? $data['font_size'] : null;
        $this->container['rotation'] = isset($data['rotation']) ? $data['rotation'] : null;
        $this->container['hposition'] = isset($data['hposition']) ? $data['hposition'] : null;
        $this->container['vposition'] = isset($data['vposition']) ? $data['vposition'] : null;
        $this->container['display_user_name'] = isset($data['display_user_name']) ? $data['display_user_name'] : null;
        $this->container['display_user_email'] = isset($data['display_user_email']) ? $data['display_user_email'] : null;
        $this->container['display_ip_address'] = isset($data['display_ip_address']) ? $data['display_ip_address'] : null;
        $this->container['display_time'] = isset($data['display_time']) ? $data['display_time'] : null;
        $this->container['display_workspace_name'] = isset($data['display_workspace_name']) ? $data['display_workspace_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets watermark_id
     * @return int
     */
    public function getWatermarkId()
    {
        return $this->container['watermark_id'];
    }

    /**
     * Sets watermark_id
     * @param int $watermark_id
     * @return $this
     */
    public function setWatermarkId($watermark_id)
    {
        $this->container['watermark_id'] = $watermark_id;

        return $this;
    }

    /**
     * Gets team_id
     * @return int
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     * @param int $team_id
     * @return $this
     */
    public function setTeamId($team_id)
    {
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets custom_text
     * @return string
     */
    public function getCustomText()
    {
        return $this->container['custom_text'];
    }

    /**
     * Sets custom_text
     * @param string $custom_text
     * @return $this
     */
    public function setCustomText($custom_text)
    {
        $this->container['custom_text'] = $custom_text;

        return $this;
    }

    /**
     * Gets color
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     * @param string $color
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets opacity
     * @return float
     */
    public function getOpacity()
    {
        return $this->container['opacity'];
    }

    /**
     * Sets opacity
     * @param float $opacity
     * @return $this
     */
    public function setOpacity($opacity)
    {
        $this->container['opacity'] = $opacity;

        return $this;
    }

    /**
     * Gets font_size
     * @return int
     */
    public function getFontSize()
    {
        return $this->container['font_size'];
    }

    /**
     * Sets font_size
     * @param int $font_size
     * @return $this
     */
    public function setFontSize($font_size)
    {
        $this->container['font_size'] = $font_size;

        return $this;
    }

    /**
     * Gets rotation
     * @return int
     */
    public function getRotation()
    {
        return $this->container['rotation'];
    }

    /**
     * Sets rotation
     * @param int $rotation
     * @return $this
     */
    public function setRotation($rotation)
    {
        $this->container['rotation'] = $rotation;

        return $this;
    }

    /**
     * Gets hposition
     * @return string
     */
    public function getHposition()
    {
        return $this->container['hposition'];
    }

    /**
     * Sets hposition
     * @param string $hposition
     * @return $this
     */
    public function setHposition($hposition)
    {
        $this->container['hposition'] = $hposition;

        return $this;
    }

    /**
     * Gets vposition
     * @return string
     */
    public function getVposition()
    {
        return $this->container['vposition'];
    }

    /**
     * Sets vposition
     * @param string $vposition
     * @return $this
     */
    public function setVposition($vposition)
    {
        $this->container['vposition'] = $vposition;

        return $this;
    }

    /**
     * Gets display_user_name
     * @return bool
     */
    public function getDisplayUserName()
    {
        return $this->container['display_user_name'];
    }

    /**
     * Sets display_user_name
     * @param bool $display_user_name
     * @return $this
     */
    public function setDisplayUserName($display_user_name)
    {
        $this->container['display_user_name'] = $display_user_name;

        return $this;
    }

    /**
     * Gets display_user_email
     * @return bool
     */
    public function getDisplayUserEmail()
    {
        return $this->container['display_user_email'];
    }

    /**
     * Sets display_user_email
     * @param bool $display_user_email
     * @return $this
     */
    public function setDisplayUserEmail($display_user_email)
    {
        $this->container['display_user_email'] = $display_user_email;

        return $this;
    }

    /**
     * Gets display_ip_address
     * @return bool
     */
    public function getDisplayIpAddress()
    {
        return $this->container['display_ip_address'];
    }

    /**
     * Sets display_ip_address
     * @param bool $display_ip_address
     * @return $this
     */
    public function setDisplayIpAddress($display_ip_address)
    {
        $this->container['display_ip_address'] = $display_ip_address;

        return $this;
    }

    /**
     * Gets display_time
     * @return bool
     */
    public function getDisplayTime()
    {
        return $this->container['display_time'];
    }

    /**
     * Sets display_time
     * @param bool $display_time
     * @return $this
     */
    public function setDisplayTime($display_time)
    {
        $this->container['display_time'] = $display_time;

        return $this;
    }

    /**
     * Gets display_workspace_name
     * @return bool
     */
    public function getDisplayWorkspaceName()
    {
        return $this->container['display_workspace_name'];
    }

    /**
     * Sets display_workspace_name
     * @param bool $display_workspace_name
     * @return $this
     */
    public function setDisplayWorkspaceName($display_workspace_name)
    {
        $this->container['display_workspace_name'] = $display_workspace_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Caplinked\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Caplinked\ObjectSerializer::sanitizeForSerialization($this));
    }
}


