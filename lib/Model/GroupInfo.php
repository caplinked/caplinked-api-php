<?php
/**
 * GroupInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GroupInfo Class Doc Comment
 *
 * @category    Class
 * @description Disable access expiration for a group
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GroupInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GroupInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'workspace_id' => 'int',
        'drm_enabled' => 'bool',
        'drm_expires_after' => 'string',
        'expire_workspace_access' => 'string',
        'expire_workspace_access_at' => 'string',
        'watermarked' => 'bool',
        'file_managing_abilities' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'workspace_id' => 'int32',
        'drm_enabled' => null,
        'drm_expires_after' => null,
        'expire_workspace_access' => null,
        'expire_workspace_access_at' => null,
        'watermarked' => null,
        'file_managing_abilities' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'workspace_id' => 'workspace_id',
        'drm_enabled' => 'drm_enabled',
        'drm_expires_after' => 'drm_expires_after',
        'expire_workspace_access' => 'expire_workspace_access',
        'expire_workspace_access_at' => 'expire_workspace_access_at',
        'watermarked' => 'watermarked',
        'file_managing_abilities' => 'file_managing_abilities'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'workspace_id' => 'setWorkspaceId',
        'drm_enabled' => 'setDrmEnabled',
        'drm_expires_after' => 'setDrmExpiresAfter',
        'expire_workspace_access' => 'setExpireWorkspaceAccess',
        'expire_workspace_access_at' => 'setExpireWorkspaceAccessAt',
        'watermarked' => 'setWatermarked',
        'file_managing_abilities' => 'setFileManagingAbilities'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'workspace_id' => 'getWorkspaceId',
        'drm_enabled' => 'getDrmEnabled',
        'drm_expires_after' => 'getDrmExpiresAfter',
        'expire_workspace_access' => 'getExpireWorkspaceAccess',
        'expire_workspace_access_at' => 'getExpireWorkspaceAccessAt',
        'watermarked' => 'getWatermarked',
        'file_managing_abilities' => 'getFileManagingAbilities'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['workspace_id'] = isset($data['workspace_id']) ? $data['workspace_id'] : null;
        $this->container['drm_enabled'] = isset($data['drm_enabled']) ? $data['drm_enabled'] : null;
        $this->container['drm_expires_after'] = isset($data['drm_expires_after']) ? $data['drm_expires_after'] : null;
        $this->container['expire_workspace_access'] = isset($data['expire_workspace_access']) ? $data['expire_workspace_access'] : null;
        $this->container['expire_workspace_access_at'] = isset($data['expire_workspace_access_at']) ? $data['expire_workspace_access_at'] : null;
        $this->container['watermarked'] = isset($data['watermarked']) ? $data['watermarked'] : null;
        $this->container['file_managing_abilities'] = isset($data['file_managing_abilities']) ? $data['file_managing_abilities'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets workspace_id
     * @return int
     */
    public function getWorkspaceId()
    {
        return $this->container['workspace_id'];
    }

    /**
     * Sets workspace_id
     * @param int $workspace_id
     * @return $this
     */
    public function setWorkspaceId($workspace_id)
    {
        $this->container['workspace_id'] = $workspace_id;

        return $this;
    }

    /**
     * Gets drm_enabled
     * @return bool
     */
    public function getDrmEnabled()
    {
        return $this->container['drm_enabled'];
    }

    /**
     * Sets drm_enabled
     * @param bool $drm_enabled
     * @return $this
     */
    public function setDrmEnabled($drm_enabled)
    {
        $this->container['drm_enabled'] = $drm_enabled;

        return $this;
    }

    /**
     * Gets drm_expires_after
     * @return string
     */
    public function getDrmExpiresAfter()
    {
        return $this->container['drm_expires_after'];
    }

    /**
     * Sets drm_expires_after
     * @param string $drm_expires_after
     * @return $this
     */
    public function setDrmExpiresAfter($drm_expires_after)
    {
        $this->container['drm_expires_after'] = $drm_expires_after;

        return $this;
    }

    /**
     * Gets expire_workspace_access
     * @return string
     */
    public function getExpireWorkspaceAccess()
    {
        return $this->container['expire_workspace_access'];
    }

    /**
     * Sets expire_workspace_access
     * @param string $expire_workspace_access
     * @return $this
     */
    public function setExpireWorkspaceAccess($expire_workspace_access)
    {
        $this->container['expire_workspace_access'] = $expire_workspace_access;

        return $this;
    }

    /**
     * Gets expire_workspace_access_at
     * @return string
     */
    public function getExpireWorkspaceAccessAt()
    {
        return $this->container['expire_workspace_access_at'];
    }

    /**
     * Sets expire_workspace_access_at
     * @param string $expire_workspace_access_at
     * @return $this
     */
    public function setExpireWorkspaceAccessAt($expire_workspace_access_at)
    {
        $this->container['expire_workspace_access_at'] = $expire_workspace_access_at;

        return $this;
    }

    /**
     * Gets watermarked
     * @return bool
     */
    public function getWatermarked()
    {
        return $this->container['watermarked'];
    }

    /**
     * Sets watermarked
     * @param bool $watermarked
     * @return $this
     */
    public function setWatermarked($watermarked)
    {
        $this->container['watermarked'] = $watermarked;

        return $this;
    }

    /**
     * Gets file_managing_abilities
     * @return bool
     */
    public function getFileManagingAbilities()
    {
        return $this->container['file_managing_abilities'];
    }

    /**
     * Sets file_managing_abilities
     * @param bool $file_managing_abilities
     * @return $this
     */
    public function setFileManagingAbilities($file_managing_abilities)
    {
        $this->container['file_managing_abilities'] = $file_managing_abilities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


