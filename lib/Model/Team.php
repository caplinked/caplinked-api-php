<?php
/**
 * Team
 *
 * PHP version 5
 *
 * @category Class
 * @package  Caplinked
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Caplinked\Model;

use \ArrayAccess;

/**
 * Team Class Doc Comment
 *
 * @category    Class
 * @description Get team information
 * @package     Caplinked
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Team implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Team';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'team_owner_id' => 'int',
        'creator_id' => 'int',
        'allowed_workspaces' => 'int',
        'allowed_admins' => 'int',
        'drm_enabled' => 'bool',
        'watermarking' => 'bool',
        'suppress_emails' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'team_owner_id' => 'int32',
        'creator_id' => 'int32',
        'allowed_workspaces' => 'int32',
        'allowed_admins' => 'int32',
        'drm_enabled' => null,
        'watermarking' => null,
        'suppress_emails' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'team_owner_id' => 'team_owner_id',
        'creator_id' => 'creator_id',
        'allowed_workspaces' => 'allowed_workspaces',
        'allowed_admins' => 'allowed_admins',
        'drm_enabled' => 'drm_enabled',
        'watermarking' => 'watermarking',
        'suppress_emails' => 'suppress_emails'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'team_owner_id' => 'setTeamOwnerId',
        'creator_id' => 'setCreatorId',
        'allowed_workspaces' => 'setAllowedWorkspaces',
        'allowed_admins' => 'setAllowedAdmins',
        'drm_enabled' => 'setDrmEnabled',
        'watermarking' => 'setWatermarking',
        'suppress_emails' => 'setSuppressEmails'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'team_owner_id' => 'getTeamOwnerId',
        'creator_id' => 'getCreatorId',
        'allowed_workspaces' => 'getAllowedWorkspaces',
        'allowed_admins' => 'getAllowedAdmins',
        'drm_enabled' => 'getDrmEnabled',
        'watermarking' => 'getWatermarking',
        'suppress_emails' => 'getSuppressEmails'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['team_owner_id'] = isset($data['team_owner_id']) ? $data['team_owner_id'] : null;
        $this->container['creator_id'] = isset($data['creator_id']) ? $data['creator_id'] : null;
        $this->container['allowed_workspaces'] = isset($data['allowed_workspaces']) ? $data['allowed_workspaces'] : null;
        $this->container['allowed_admins'] = isset($data['allowed_admins']) ? $data['allowed_admins'] : null;
        $this->container['drm_enabled'] = isset($data['drm_enabled']) ? $data['drm_enabled'] : null;
        $this->container['watermarking'] = isset($data['watermarking']) ? $data['watermarking'] : null;
        $this->container['suppress_emails'] = isset($data['suppress_emails']) ? $data['suppress_emails'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets team_owner_id
     * @return int
     */
    public function getTeamOwnerId()
    {
        return $this->container['team_owner_id'];
    }

    /**
     * Sets team_owner_id
     * @param int $team_owner_id
     * @return $this
     */
    public function setTeamOwnerId($team_owner_id)
    {
        $this->container['team_owner_id'] = $team_owner_id;

        return $this;
    }

    /**
     * Gets creator_id
     * @return int
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     * @param int $creator_id
     * @return $this
     */
    public function setCreatorId($creator_id)
    {
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets allowed_workspaces
     * @return int
     */
    public function getAllowedWorkspaces()
    {
        return $this->container['allowed_workspaces'];
    }

    /**
     * Sets allowed_workspaces
     * @param int $allowed_workspaces
     * @return $this
     */
    public function setAllowedWorkspaces($allowed_workspaces)
    {
        $this->container['allowed_workspaces'] = $allowed_workspaces;

        return $this;
    }

    /**
     * Gets allowed_admins
     * @return int
     */
    public function getAllowedAdmins()
    {
        return $this->container['allowed_admins'];
    }

    /**
     * Sets allowed_admins
     * @param int $allowed_admins
     * @return $this
     */
    public function setAllowedAdmins($allowed_admins)
    {
        $this->container['allowed_admins'] = $allowed_admins;

        return $this;
    }

    /**
     * Gets drm_enabled
     * @return bool
     */
    public function getDrmEnabled()
    {
        return $this->container['drm_enabled'];
    }

    /**
     * Sets drm_enabled
     * @param bool $drm_enabled
     * @return $this
     */
    public function setDrmEnabled($drm_enabled)
    {
        $this->container['drm_enabled'] = $drm_enabled;

        return $this;
    }

    /**
     * Gets watermarking
     * @return bool
     */
    public function getWatermarking()
    {
        return $this->container['watermarking'];
    }

    /**
     * Sets watermarking
     * @param bool $watermarking
     * @return $this
     */
    public function setWatermarking($watermarking)
    {
        $this->container['watermarking'] = $watermarking;

        return $this;
    }

    /**
     * Gets suppress_emails
     * @return bool
     */
    public function getSuppressEmails()
    {
        return $this->container['suppress_emails'];
    }

    /**
     * Sets suppress_emails
     * @param bool $suppress_emails
     * @return $this
     */
    public function setSuppressEmails($suppress_emails)
    {
        $this->container['suppress_emails'] = $suppress_emails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Caplinked\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Caplinked\ObjectSerializer::sanitizeForSerialization($this));
    }
}


