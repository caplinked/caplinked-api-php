<?php
/**
 * UsersApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * UsersApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UsersApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return UsersApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteUsers
     *
     * Delete user
     *
     * @param int $user_id ID of the user you want to delete (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\StatusMessage
     */
    public function deleteUsers($user_id)
    {
        list($response) = $this->deleteUsersWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation deleteUsersWithHttpInfo
     *
     * Delete user
     *
     * @param int $user_id ID of the user you want to delete (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\StatusMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUsersWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling deleteUsers');
        }
        // parse inputs
        $resourcePath = "/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($user_id !== null) {
            $queryParams['user[id]'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\StatusMessage',
                '/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\StatusMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\StatusMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUsersMe
     *
     * Get user information
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\User
     */
    public function getUsersMe()
    {
        list($response) = $this->getUsersMeWithHttpInfo();
        return $response;
    }

    /**
     * Operation getUsersMeWithHttpInfo
     *
     * Get user information
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersMeWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/users/me";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\User',
                '/users/me'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\User', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\User', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postUsers
     *
     * Create user
     *
     * @param string $user_email Email of new user (required)
     * @param string $user_first_name First of new user (required)
     * @param string $user_last_name Last name of new user (required)
     * @param string $user_time_zone Time zone of new user (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\User
     */
    public function postUsers($user_email, $user_first_name, $user_last_name, $user_time_zone = null)
    {
        list($response) = $this->postUsersWithHttpInfo($user_email, $user_first_name, $user_last_name, $user_time_zone);
        return $response;
    }

    /**
     * Operation postUsersWithHttpInfo
     *
     * Create user
     *
     * @param string $user_email Email of new user (required)
     * @param string $user_first_name First of new user (required)
     * @param string $user_last_name Last name of new user (required)
     * @param string $user_time_zone Time zone of new user (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function postUsersWithHttpInfo($user_email, $user_first_name, $user_last_name, $user_time_zone = null)
    {
        // verify the required parameter 'user_email' is set
        if ($user_email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_email when calling postUsers');
        }
        // verify the required parameter 'user_first_name' is set
        if ($user_first_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_first_name when calling postUsers');
        }
        // verify the required parameter 'user_last_name' is set
        if ($user_last_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_last_name when calling postUsers');
        }
        // parse inputs
        $resourcePath = "/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // form params
        if ($user_email !== null) {
            $formParams['user[email]'] = $this->apiClient->getSerializer()->toFormValue($user_email);
        }
        // form params
        if ($user_first_name !== null) {
            $formParams['user[first_name]'] = $this->apiClient->getSerializer()->toFormValue($user_first_name);
        }
        // form params
        if ($user_last_name !== null) {
            $formParams['user[last_name]'] = $this->apiClient->getSerializer()->toFormValue($user_last_name);
        }
        // form params
        if ($user_time_zone !== null) {
            $formParams['user[time_zone]'] = $this->apiClient->getSerializer()->toFormValue($user_time_zone);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\User',
                '/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\User', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\User', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putUsersMe
     *
     * Update a user
     *
     * @param string $user_email Email of user to update (optional)
     * @param string $user_first_name First name of user to update (optional)
     * @param string $user_last_name Last name of user to update (optional)
     * @param string $user_time_zone Time zone of user to update (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\User
     */
    public function putUsersMe($user_email = null, $user_first_name = null, $user_last_name = null, $user_time_zone = null)
    {
        list($response) = $this->putUsersMeWithHttpInfo($user_email, $user_first_name, $user_last_name, $user_time_zone);
        return $response;
    }

    /**
     * Operation putUsersMeWithHttpInfo
     *
     * Update a user
     *
     * @param string $user_email Email of user to update (optional)
     * @param string $user_first_name First name of user to update (optional)
     * @param string $user_last_name Last name of user to update (optional)
     * @param string $user_time_zone Time zone of user to update (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function putUsersMeWithHttpInfo($user_email = null, $user_first_name = null, $user_last_name = null, $user_time_zone = null)
    {
        // parse inputs
        $resourcePath = "/users/me";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // form params
        if ($user_email !== null) {
            $formParams['user[email]'] = $this->apiClient->getSerializer()->toFormValue($user_email);
        }
        // form params
        if ($user_first_name !== null) {
            $formParams['user[first_name]'] = $this->apiClient->getSerializer()->toFormValue($user_first_name);
        }
        // form params
        if ($user_last_name !== null) {
            $formParams['user[last_name]'] = $this->apiClient->getSerializer()->toFormValue($user_last_name);
        }
        // form params
        if ($user_time_zone !== null) {
            $formParams['user[time_zone]'] = $this->apiClient->getSerializer()->toFormValue($user_time_zone);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\User',
                '/users/me'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\User', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\User', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
