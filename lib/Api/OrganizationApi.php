<?php
/**
 * OrganizationApi
 * PHP version 5
 *
 * @category Class
 * @package  Caplinked
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Caplinked\Api;

use \Caplinked\ApiClient;
use \Caplinked\ApiException;
use \Caplinked\Configuration;
use \Caplinked\ObjectSerializer;

/**
 * OrganizationApi Class Doc Comment
 *
 * @category Class
 * @package  Caplinked
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationApi
{
    /**
     * API Client
     *
     * @var \Caplinked\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Caplinked\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Caplinked\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Caplinked\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Caplinked\ApiClient $apiClient set the API client
     *
     * @return OrganizationApi
     */
    public function setApiClient(\Caplinked\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteOrganizationMemberships
     *
     * Remove organization admin membership
     *
     * @param int $user_id ID of user to be removed as an organization admin (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return void
     */
    public function deleteOrganizationMemberships($user_id)
    {
        list($response) = $this->deleteOrganizationMembershipsWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation deleteOrganizationMembershipsWithHttpInfo
     *
     * Remove organization admin membership
     *
     * @param int $user_id ID of user to be removed as an organization admin (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrganizationMembershipsWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling deleteOrganizationMemberships');
        }
        // parse inputs
        $resourcePath = "/organization/memberships";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/organization/memberships'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getOrganization
     *
     * Get organization information
     *
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\Organization
     */
    public function getOrganization()
    {
        list($response) = $this->getOrganizationWithHttpInfo();
        return $response;
    }

    /**
     * Operation getOrganizationWithHttpInfo
     *
     * Get organization information
     *
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\Organization, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/organization";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\Organization',
                '/organization'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\Organization', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\Organization', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOrganizationMemberships
     *
     * Show all organization members
     *
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\User
     */
    public function getOrganizationMemberships()
    {
        list($response) = $this->getOrganizationMembershipsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getOrganizationMembershipsWithHttpInfo
     *
     * Show all organization members
     *
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationMembershipsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/organization/memberships";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\User',
                '/organization/memberships'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\User', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\User', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postOrganizationMemberships
     *
     * Add organization admin membership
     *
     * @param int $user_id ID of user to be added as an organization admin (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\OrganizationMembership
     */
    public function postOrganizationMemberships($user_id)
    {
        list($response) = $this->postOrganizationMembershipsWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation postOrganizationMembershipsWithHttpInfo
     *
     * Add organization admin membership
     *
     * @param int $user_id ID of user to be added as an organization admin (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\OrganizationMembership, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOrganizationMembershipsWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling postOrganizationMemberships');
        }
        // parse inputs
        $resourcePath = "/organization/memberships";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // form params
        if ($user_id !== null) {
            $formParams['user_id'] = $this->apiClient->getSerializer()->toFormValue($user_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\OrganizationMembership',
                '/organization/memberships'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\OrganizationMembership', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\OrganizationMembership', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putOrganization
     *
     * Update organization information
     *
     * @param string $name Name of the organization to update (optional)
     * @param string $description Description of the organization to update (optional)
     * @param string $location Location of the organization to update (optional)
     * @param string $billing_email Billing email address of the organization to update (optional)
     * @param string $url Website of the organization to update (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\Organization
     */
    public function putOrganization($name = null, $description = null, $location = null, $billing_email = null, $url = null)
    {
        list($response) = $this->putOrganizationWithHttpInfo($name, $description, $location, $billing_email, $url);
        return $response;
    }

    /**
     * Operation putOrganizationWithHttpInfo
     *
     * Update organization information
     *
     * @param string $name Name of the organization to update (optional)
     * @param string $description Description of the organization to update (optional)
     * @param string $location Location of the organization to update (optional)
     * @param string $billing_email Billing email address of the organization to update (optional)
     * @param string $url Website of the organization to update (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\Organization, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOrganizationWithHttpInfo($name = null, $description = null, $location = null, $billing_email = null, $url = null)
    {
        // parse inputs
        $resourcePath = "/organization";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = $this->apiClient->getSerializer()->toFormValue($description);
        }
        // form params
        if ($location !== null) {
            $formParams['location'] = $this->apiClient->getSerializer()->toFormValue($location);
        }
        // form params
        if ($billing_email !== null) {
            $formParams['billing_email'] = $this->apiClient->getSerializer()->toFormValue($billing_email);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = $this->apiClient->getSerializer()->toFormValue($url);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\Organization',
                '/organization'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\Organization', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\Organization', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putOrganizationSupportInformation
     *
     * Update support information of organization
     *
     * @param string $phone_number Support phone number of the organization to update (optional)
     * @param string $email Support email of the organization to update (optional)
     * @param string $website Support website of the organization to update (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\SupportInformation
     */
    public function putOrganizationSupportInformation($phone_number = null, $email = null, $website = null)
    {
        list($response) = $this->putOrganizationSupportInformationWithHttpInfo($phone_number, $email, $website);
        return $response;
    }

    /**
     * Operation putOrganizationSupportInformationWithHttpInfo
     *
     * Update support information of organization
     *
     * @param string $phone_number Support phone number of the organization to update (optional)
     * @param string $email Support email of the organization to update (optional)
     * @param string $website Support website of the organization to update (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\SupportInformation, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOrganizationSupportInformationWithHttpInfo($phone_number = null, $email = null, $website = null)
    {
        // parse inputs
        $resourcePath = "/organization/support_information";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // form params
        if ($phone_number !== null) {
            $formParams['phone_number'] = $this->apiClient->getSerializer()->toFormValue($phone_number);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }
        // form params
        if ($website !== null) {
            $formParams['website'] = $this->apiClient->getSerializer()->toFormValue($website);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\SupportInformation',
                '/organization/support_information'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\SupportInformation', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\SupportInformation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
