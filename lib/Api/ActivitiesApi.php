<?php
/**
 * ActivitiesApi
 * PHP version 5
 *
 * @category Class
 * @package  Caplinked
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Caplinked\Api;

use \Caplinked\ApiClient;
use \Caplinked\ApiException;
use \Caplinked\Configuration;
use \Caplinked\ObjectSerializer;

/**
 * ActivitiesApi Class Doc Comment
 *
 * @category Class
 * @package  Caplinked
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActivitiesApi
{
    /**
     * API Client
     *
     * @var \Caplinked\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Caplinked\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Caplinked\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Caplinked\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Caplinked\ApiClient $apiClient set the API client
     *
     * @return ActivitiesApi
     */
    public function setApiClient(\Caplinked\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getActivitiesWorkspaceWorkspaceId
     *
     * Get workspace activities
     *
     * @param int $workspace_id ID of the workspace (required)
     * @param int $page Page number of results (optional, default to 1)
     * @param int $per_page Per page number of results. Options: 25, 50, 75, 100 (optional, default to 100)
     * @param int $user_id ID of the user (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\Activity
     */
    public function getActivitiesWorkspaceWorkspaceId($workspace_id, $page = '1', $per_page = '100', $user_id = null)
    {
        list($response) = $this->getActivitiesWorkspaceWorkspaceIdWithHttpInfo($workspace_id, $page, $per_page, $user_id);
        return $response;
    }

    /**
     * Operation getActivitiesWorkspaceWorkspaceIdWithHttpInfo
     *
     * Get workspace activities
     *
     * @param int $workspace_id ID of the workspace (required)
     * @param int $page Page number of results (optional, default to 1)
     * @param int $per_page Per page number of results. Options: 25, 50, 75, 100 (optional, default to 100)
     * @param int $user_id ID of the user (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\Activity, HTTP status code, HTTP response headers (array of strings)
     */
    public function getActivitiesWorkspaceWorkspaceIdWithHttpInfo($workspace_id, $page = '1', $per_page = '100', $user_id = null)
    {
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling getActivitiesWorkspaceWorkspaceId');
        }
        // parse inputs
        $resourcePath = "/activities/workspace/{workspace_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                "{" . "workspace_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($workspace_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\Activity',
                '/activities/workspace/{workspace_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\Activity', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\Activity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
