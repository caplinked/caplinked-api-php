<?php
/**
 * DownloadsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DownloadsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DownloadsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DownloadsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteDownloadsId
     *
     * Delete download
     *
     * @param int $id ID of download to delete (required)
     * @param int $workspace_id ID of Workspace (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Delete
     */
    public function deleteDownloadsId($id, $workspace_id)
    {
        list($response) = $this->deleteDownloadsIdWithHttpInfo($id, $workspace_id);
        return $response;
    }

    /**
     * Operation deleteDownloadsIdWithHttpInfo
     *
     * Delete download
     *
     * @param int $id ID of download to delete (required)
     * @param int $workspace_id ID of Workspace (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Delete, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDownloadsIdWithHttpInfo($id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteDownloadsId');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling deleteDownloadsId');
        }
        // parse inputs
        $resourcePath = "/downloads/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($workspace_id !== null) {
            $queryParams['workspace_id'] = $this->apiClient->getSerializer()->toQueryValue($workspace_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Delete',
                '/downloads/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Delete', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Delete', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDownloadsFileFileId
     *
     * Get single file
     *
     * @param int $file_id ID of file to download (required)
     * @param int $workspace_id ID of Workspace (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ExpiringUrl
     */
    public function getDownloadsFileFileId($file_id, $workspace_id)
    {
        list($response) = $this->getDownloadsFileFileIdWithHttpInfo($file_id, $workspace_id);
        return $response;
    }

    /**
     * Operation getDownloadsFileFileIdWithHttpInfo
     *
     * Get single file
     *
     * @param int $file_id ID of file to download (required)
     * @param int $workspace_id ID of Workspace (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ExpiringUrl, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDownloadsFileFileIdWithHttpInfo($file_id, $workspace_id)
    {
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_id when calling getDownloadsFileFileId');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling getDownloadsFileFileId');
        }
        // parse inputs
        $resourcePath = "/downloads/file/{file_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($workspace_id !== null) {
            $queryParams['workspace_id'] = $this->apiClient->getSerializer()->toQueryValue($workspace_id);
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                "{" . "file_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($file_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ExpiringUrl',
                '/downloads/file/{file_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ExpiringUrl', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ExpiringUrl', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDownloadsId
     *
     * Get zip
     *
     * @param int $id ID of download (required)
     * @param int $workspace_id ID of Workspace (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ExpiringUrl
     */
    public function getDownloadsId($id, $workspace_id)
    {
        list($response) = $this->getDownloadsIdWithHttpInfo($id, $workspace_id);
        return $response;
    }

    /**
     * Operation getDownloadsIdWithHttpInfo
     *
     * Get zip
     *
     * @param int $id ID of download (required)
     * @param int $workspace_id ID of Workspace (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ExpiringUrl, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDownloadsIdWithHttpInfo($id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getDownloadsId');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling getDownloadsId');
        }
        // parse inputs
        $resourcePath = "/downloads/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($workspace_id !== null) {
            $queryParams['workspace_id'] = $this->apiClient->getSerializer()->toQueryValue($workspace_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ExpiringUrl',
                '/downloads/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ExpiringUrl', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ExpiringUrl', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDownloadsStatusWorkspaceId
     *
     * Get status of downloads for current user
     *
     * @param int $workspace_id ID of Workspace (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Meta
     */
    public function getDownloadsStatusWorkspaceId($workspace_id)
    {
        list($response) = $this->getDownloadsStatusWorkspaceIdWithHttpInfo($workspace_id);
        return $response;
    }

    /**
     * Operation getDownloadsStatusWorkspaceIdWithHttpInfo
     *
     * Get status of downloads for current user
     *
     * @param int $workspace_id ID of Workspace (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Meta, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDownloadsStatusWorkspaceIdWithHttpInfo($workspace_id)
    {
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling getDownloadsStatusWorkspaceId');
        }
        // parse inputs
        $resourcePath = "/downloads/status/{workspace_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                "{" . "workspace_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($workspace_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Meta',
                '/downloads/status/{workspace_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Meta', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Meta', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postDownloads
     *
     * Create zip file
     *
     * @param int $workspace_id ID of Workspace (required)
     * @param int[] $download_folder_ids IDs of folders to include in download (optional)
     * @param int[] $download_file_ids IDs of files to include in download (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Meta
     */
    public function postDownloads($workspace_id, $download_folder_ids = null, $download_file_ids = null)
    {
        list($response) = $this->postDownloadsWithHttpInfo($workspace_id, $download_folder_ids, $download_file_ids);
        return $response;
    }

    /**
     * Operation postDownloadsWithHttpInfo
     *
     * Create zip file
     *
     * @param int $workspace_id ID of Workspace (required)
     * @param int[] $download_folder_ids IDs of folders to include in download (optional)
     * @param int[] $download_file_ids IDs of files to include in download (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Meta, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDownloadsWithHttpInfo($workspace_id, $download_folder_ids = null, $download_file_ids = null)
    {
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling postDownloads');
        }
        // parse inputs
        $resourcePath = "/downloads";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }
        // form params
        if ($download_folder_ids !== null) {
            $formParams['download[folder_ids]'] = $this->apiClient->getSerializer()->toFormValue($download_folder_ids);
        }
        // form params
        if ($download_file_ids !== null) {
            $formParams['download[file_ids]'] = $this->apiClient->getSerializer()->toFormValue($download_file_ids);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Meta',
                '/downloads'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Meta', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Meta', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
