<?php
/**
 * FilesApi
 * PHP version 5
 *
 * @category Class
 * @package  Caplinked
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Caplinked\Api;

use \Caplinked\ApiClient;
use \Caplinked\ApiException;
use \Caplinked\Configuration;
use \Caplinked\ObjectSerializer;

/**
 * FilesApi Class Doc Comment
 *
 * @category Class
 * @package  Caplinked
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FilesApi
{
    /**
     * API Client
     *
     * @var \Caplinked\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Caplinked\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Caplinked\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Caplinked\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Caplinked\ApiClient $apiClient set the API client
     *
     * @return FilesApi
     */
    public function setApiClient(\Caplinked\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteFilesId
     *
     * Delete file
     *
     * @param int $id ID of file to delete (required)
     * @param int $workspace_id ID of workspace (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\FileDelete
     */
    public function deleteFilesId($id, $workspace_id)
    {
        list($response) = $this->deleteFilesIdWithHttpInfo($id, $workspace_id);
        return $response;
    }

    /**
     * Operation deleteFilesIdWithHttpInfo
     *
     * Delete file
     *
     * @param int $id ID of file to delete (required)
     * @param int $workspace_id ID of workspace (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\FileDelete, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFilesIdWithHttpInfo($id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteFilesId');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling deleteFilesId');
        }
        // parse inputs
        $resourcePath = "/files/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($workspace_id !== null) {
            $queryParams['workspace_id'] = $this->apiClient->getSerializer()->toQueryValue($workspace_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\FileDelete',
                '/files/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\FileDelete', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\FileDelete', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFilesId
     *
     * Get file information
     *
     * @param int $id ID of file (required)
     * @param int $workspace_id ID of workspace (required)
     * @param int $page_number Page number of file (for viewer tokens) (optional, default to 1)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\FileInfoMapped
     */
    public function getFilesId($id, $workspace_id, $page_number = '1')
    {
        list($response) = $this->getFilesIdWithHttpInfo($id, $workspace_id, $page_number);
        return $response;
    }

    /**
     * Operation getFilesIdWithHttpInfo
     *
     * Get file information
     *
     * @param int $id ID of file (required)
     * @param int $workspace_id ID of workspace (required)
     * @param int $page_number Page number of file (for viewer tokens) (optional, default to 1)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\FileInfoMapped, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFilesIdWithHttpInfo($id, $workspace_id, $page_number = '1')
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getFilesId');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling getFilesId');
        }
        // parse inputs
        $resourcePath = "/files/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($workspace_id !== null) {
            $queryParams['workspace_id'] = $this->apiClient->getSerializer()->toQueryValue($workspace_id);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['page_number'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\FileInfoMapped',
                '/files/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\FileInfoMapped', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\FileInfoMapped', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postFilesIdCopy
     *
     * Copy file
     *
     * @param int $id ID of file to copy (required)
     * @param int $workspace_id ID of workspace (required)
     * @param int $destination_folder_id ID of destination parent folder (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\FileCopyMove
     */
    public function postFilesIdCopy($id, $workspace_id, $destination_folder_id)
    {
        list($response) = $this->postFilesIdCopyWithHttpInfo($id, $workspace_id, $destination_folder_id);
        return $response;
    }

    /**
     * Operation postFilesIdCopyWithHttpInfo
     *
     * Copy file
     *
     * @param int $id ID of file to copy (required)
     * @param int $workspace_id ID of workspace (required)
     * @param int $destination_folder_id ID of destination parent folder (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\FileCopyMove, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFilesIdCopyWithHttpInfo($id, $workspace_id, $destination_folder_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling postFilesIdCopy');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling postFilesIdCopy');
        }
        // verify the required parameter 'destination_folder_id' is set
        if ($destination_folder_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destination_folder_id when calling postFilesIdCopy');
        }
        // parse inputs
        $resourcePath = "/files/{id}/copy";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }
        // form params
        if ($destination_folder_id !== null) {
            $formParams['destination_folder_id'] = $this->apiClient->getSerializer()->toFormValue($destination_folder_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\FileCopyMove',
                '/files/{id}/copy'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\FileCopyMove', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\FileCopyMove', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postFilesIdMove
     *
     * Move file
     *
     * @param int $id ID of file to move (required)
     * @param int $workspace_id ID of workspace (required)
     * @param int $destination_folder_id ID of destination parent folder (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\FileCopyMove
     */
    public function postFilesIdMove($id, $workspace_id, $destination_folder_id)
    {
        list($response) = $this->postFilesIdMoveWithHttpInfo($id, $workspace_id, $destination_folder_id);
        return $response;
    }

    /**
     * Operation postFilesIdMoveWithHttpInfo
     *
     * Move file
     *
     * @param int $id ID of file to move (required)
     * @param int $workspace_id ID of workspace (required)
     * @param int $destination_folder_id ID of destination parent folder (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\FileCopyMove, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFilesIdMoveWithHttpInfo($id, $workspace_id, $destination_folder_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling postFilesIdMove');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling postFilesIdMove');
        }
        // verify the required parameter 'destination_folder_id' is set
        if ($destination_folder_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destination_folder_id when calling postFilesIdMove');
        }
        // parse inputs
        $resourcePath = "/files/{id}/move";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }
        // form params
        if ($destination_folder_id !== null) {
            $formParams['destination_folder_id'] = $this->apiClient->getSerializer()->toFormValue($destination_folder_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\FileCopyMove',
                '/files/{id}/move'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\FileCopyMove', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\FileCopyMove', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putFilesId
     *
     * Update file information
     *
     * @param int $id ID of file (required)
     * @param int $workspace_id ID of workspace (required)
     * @param string $file_title Title of file (optional)
     * @param int $file_index Index number of file within current folder scope (integer) (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\FileInfoMapped
     */
    public function putFilesId($id, $workspace_id, $file_title = null, $file_index = null)
    {
        list($response) = $this->putFilesIdWithHttpInfo($id, $workspace_id, $file_title, $file_index);
        return $response;
    }

    /**
     * Operation putFilesIdWithHttpInfo
     *
     * Update file information
     *
     * @param int $id ID of file (required)
     * @param int $workspace_id ID of workspace (required)
     * @param string $file_title Title of file (optional)
     * @param int $file_index Index number of file within current folder scope (integer) (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\FileInfoMapped, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFilesIdWithHttpInfo($id, $workspace_id, $file_title = null, $file_index = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling putFilesId');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling putFilesId');
        }
        // parse inputs
        $resourcePath = "/files/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }
        // form params
        if ($file_title !== null) {
            $formParams['file[title]'] = $this->apiClient->getSerializer()->toFormValue($file_title);
        }
        // form params
        if ($file_index !== null) {
            $formParams['file[index]'] = $this->apiClient->getSerializer()->toFormValue($file_index);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\FileInfoMapped',
                '/files/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\FileInfoMapped', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\FileInfoMapped', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putFilesUpload
     *
     * Upload file
     *
     * @param int $workspace_id Workspace ID (required)
     * @param int $folder_id Folder ID (required)
     * @param string $file_name File name (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\FileInfoCompact
     */
    public function putFilesUpload($workspace_id, $folder_id, $file_name)
    {
        list($response) = $this->putFilesUploadWithHttpInfo($workspace_id, $folder_id, $file_name);
        return $response;
    }

    /**
     * Operation putFilesUploadWithHttpInfo
     *
     * Upload file
     *
     * @param int $workspace_id Workspace ID (required)
     * @param int $folder_id Folder ID (required)
     * @param string $file_name File name (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\FileInfoCompact, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFilesUploadWithHttpInfo($workspace_id, $folder_id, $file_name)
    {
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling putFilesUpload');
        }
        // verify the required parameter 'folder_id' is set
        if ($folder_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $folder_id when calling putFilesUpload');
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_name when calling putFilesUpload');
        }
        // parse inputs
        $resourcePath = "/files/upload";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }
        // form params
        if ($folder_id !== null) {
            $formParams['folder_id'] = $this->apiClient->getSerializer()->toFormValue($folder_id);
        }
        // form params
        if ($file_name !== null) {
            $formParams['file_name'] = $this->apiClient->getSerializer()->toFormValue($file_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\FileInfoCompact',
                '/files/upload'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\FileInfoCompact', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\FileInfoCompact', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
