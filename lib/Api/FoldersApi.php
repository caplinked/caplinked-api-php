<?php
/**
 * FoldersApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * FoldersApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FoldersApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return FoldersApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteFoldersId
     *
     * Delete folder
     *
     * @param int $id ID of folder to delete (required)
     * @param string $workspace_id ID of workspace (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\FolderDelete
     */
    public function deleteFoldersId($id, $workspace_id)
    {
        list($response) = $this->deleteFoldersIdWithHttpInfo($id, $workspace_id);
        return $response;
    }

    /**
     * Operation deleteFoldersIdWithHttpInfo
     *
     * Delete folder
     *
     * @param int $id ID of folder to delete (required)
     * @param string $workspace_id ID of workspace (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\FolderDelete, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFoldersIdWithHttpInfo($id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteFoldersId');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling deleteFoldersId');
        }
        // parse inputs
        $resourcePath = "/folders/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($workspace_id !== null) {
            $queryParams['workspace_id'] = $this->apiClient->getSerializer()->toQueryValue($workspace_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FolderDelete',
                '/folders/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FolderDelete', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FolderDelete', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFoldersId
     *
     * Get folder information
     *
     * @param int $id ID of folder (required)
     * @param string $workspace_id ID of workspace (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\FolderContent
     */
    public function getFoldersId($id, $workspace_id)
    {
        list($response) = $this->getFoldersIdWithHttpInfo($id, $workspace_id);
        return $response;
    }

    /**
     * Operation getFoldersIdWithHttpInfo
     *
     * Get folder information
     *
     * @param int $id ID of folder (required)
     * @param string $workspace_id ID of workspace (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\FolderContent, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFoldersIdWithHttpInfo($id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getFoldersId');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling getFoldersId');
        }
        // parse inputs
        $resourcePath = "/folders/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($workspace_id !== null) {
            $queryParams['workspace_id'] = $this->apiClient->getSerializer()->toQueryValue($workspace_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FolderContent',
                '/folders/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FolderContent', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FolderContent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postFolders
     *
     * Create new folder
     *
     * @param string $workspace_id ID of workspace (required)
     * @param string $name Name of new folder (required)
     * @param int $parent_id ID of parent folder (defaults to root folder [id&#x3D;0]) (optional, default to 0)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\FolderMeta
     */
    public function postFolders($workspace_id, $name, $parent_id = '0')
    {
        list($response) = $this->postFoldersWithHttpInfo($workspace_id, $name, $parent_id);
        return $response;
    }

    /**
     * Operation postFoldersWithHttpInfo
     *
     * Create new folder
     *
     * @param string $workspace_id ID of workspace (required)
     * @param string $name Name of new folder (required)
     * @param int $parent_id ID of parent folder (defaults to root folder [id&#x3D;0]) (optional, default to 0)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\FolderMeta, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFoldersWithHttpInfo($workspace_id, $name, $parent_id = '0')
    {
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling postFolders');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postFolders');
        }
        // parse inputs
        $resourcePath = "/folders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }
        // form params
        if ($parent_id !== null) {
            $formParams['parent_id'] = $this->apiClient->getSerializer()->toFormValue($parent_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FolderMeta',
                '/folders'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FolderMeta', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FolderMeta', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postFoldersIdCopy
     *
     * Copy folder
     *
     * @param int $id ID of folder to copy (required)
     * @param string $workspace_id ID of workspace (required)
     * @param int $destination_folder_id ID of destination parent folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\FolderCopyMove
     */
    public function postFoldersIdCopy($id, $workspace_id, $destination_folder_id)
    {
        list($response) = $this->postFoldersIdCopyWithHttpInfo($id, $workspace_id, $destination_folder_id);
        return $response;
    }

    /**
     * Operation postFoldersIdCopyWithHttpInfo
     *
     * Copy folder
     *
     * @param int $id ID of folder to copy (required)
     * @param string $workspace_id ID of workspace (required)
     * @param int $destination_folder_id ID of destination parent folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\FolderCopyMove, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFoldersIdCopyWithHttpInfo($id, $workspace_id, $destination_folder_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling postFoldersIdCopy');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling postFoldersIdCopy');
        }
        // verify the required parameter 'destination_folder_id' is set
        if ($destination_folder_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destination_folder_id when calling postFoldersIdCopy');
        }
        // parse inputs
        $resourcePath = "/folders/{id}/copy";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }
        // form params
        if ($destination_folder_id !== null) {
            $formParams['destination_folder_id'] = $this->apiClient->getSerializer()->toFormValue($destination_folder_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FolderCopyMove',
                '/folders/{id}/copy'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FolderCopyMove', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FolderCopyMove', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postFoldersIdMove
     *
     * Move folder
     *
     * @param int $id ID of folder to move (required)
     * @param string $workspace_id ID of workspace (required)
     * @param int $destination_folder_id ID of destination parent folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\FolderCopyMove
     */
    public function postFoldersIdMove($id, $workspace_id, $destination_folder_id)
    {
        list($response) = $this->postFoldersIdMoveWithHttpInfo($id, $workspace_id, $destination_folder_id);
        return $response;
    }

    /**
     * Operation postFoldersIdMoveWithHttpInfo
     *
     * Move folder
     *
     * @param int $id ID of folder to move (required)
     * @param string $workspace_id ID of workspace (required)
     * @param int $destination_folder_id ID of destination parent folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\FolderCopyMove, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFoldersIdMoveWithHttpInfo($id, $workspace_id, $destination_folder_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling postFoldersIdMove');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling postFoldersIdMove');
        }
        // verify the required parameter 'destination_folder_id' is set
        if ($destination_folder_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destination_folder_id when calling postFoldersIdMove');
        }
        // parse inputs
        $resourcePath = "/folders/{id}/move";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }
        // form params
        if ($destination_folder_id !== null) {
            $formParams['destination_folder_id'] = $this->apiClient->getSerializer()->toFormValue($destination_folder_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FolderCopyMove',
                '/folders/{id}/move'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FolderCopyMove', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FolderCopyMove', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putFoldersId
     *
     * Update folder information
     *
     * @param int $id Update folder name and index (required)
     * @param string $workspace_id ID of workspace (required)
     * @param string $folder_name Name of folder (optional)
     * @param int $folder_index Index number of folder within current folder scope (integer) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\FolderMeta
     */
    public function putFoldersId($id, $workspace_id, $folder_name = null, $folder_index = null)
    {
        list($response) = $this->putFoldersIdWithHttpInfo($id, $workspace_id, $folder_name, $folder_index);
        return $response;
    }

    /**
     * Operation putFoldersIdWithHttpInfo
     *
     * Update folder information
     *
     * @param int $id Update folder name and index (required)
     * @param string $workspace_id ID of workspace (required)
     * @param string $folder_name Name of folder (optional)
     * @param int $folder_index Index number of folder within current folder scope (integer) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\FolderMeta, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFoldersIdWithHttpInfo($id, $workspace_id, $folder_name = null, $folder_index = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling putFoldersId');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling putFoldersId');
        }
        // parse inputs
        $resourcePath = "/folders/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }
        // form params
        if ($folder_name !== null) {
            $formParams['folder[name]'] = $this->apiClient->getSerializer()->toFormValue($folder_name);
        }
        // form params
        if ($folder_index !== null) {
            $formParams['folder[index]'] = $this->apiClient->getSerializer()->toFormValue($folder_index);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FolderMeta',
                '/folders/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FolderMeta', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FolderMeta', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
