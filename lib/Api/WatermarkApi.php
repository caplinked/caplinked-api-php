<?php
/**
 * WatermarkApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * WatermarkApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WatermarkApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return WatermarkApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteWatermarkId
     *
     * Delete custom watermark
     *
     * @param int $id ID of the watermark setting to delete (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\StatusMessage
     */
    public function deleteWatermarkId($id)
    {
        list($response) = $this->deleteWatermarkIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteWatermarkIdWithHttpInfo
     *
     * Delete custom watermark
     *
     * @param int $id ID of the watermark setting to delete (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\StatusMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWatermarkIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteWatermarkId');
        }
        // parse inputs
        $resourcePath = "/watermark/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\StatusMessage',
                '/watermark/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\StatusMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\StatusMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWatermarkId
     *
     * Get custom watermark setting
     *
     * @param int $id ID of the watermark setting (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CustomWatermarkSetting
     */
    public function getWatermarkId($id)
    {
        list($response) = $this->getWatermarkIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getWatermarkIdWithHttpInfo
     *
     * Get custom watermark setting
     *
     * @param int $id ID of the watermark setting (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CustomWatermarkSetting, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWatermarkIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getWatermarkId');
        }
        // parse inputs
        $resourcePath = "/watermark/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomWatermarkSetting',
                '/watermark/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomWatermarkSetting', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomWatermarkSetting', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postWatermark
     *
     * Add custom watermark
     *
     * @param int $team_id ID of the team (required)
     * @param string $custom_text Custom watermark text (required)
     * @param string $color Hexadecimal color value (i.e. #eee, #e1e1e1) (optional, default to #333333)
     * @param float $opacity Opacity 0 to 1.0 (optional, default to 0.5)
     * @param int $font_size Font size in pixels (optional, default to 18)
     * @param int $rotation Rotation degrees (-90 to 90) (optional, default to 0)
     * @param string $hposition Horizontal position (left, center, right) (optional, default to center)
     * @param string $vposition Vertical position (top, center, bottom) (optional, default to center)
     * @param bool $display_user_name Display user name (optional, default to true)
     * @param bool $display_user_email Display user email address (optional, default to true)
     * @param bool $display_ip_address Display user IP address (optional, default to true)
     * @param bool $display_time Display time (optional, default to true)
     * @param bool $display_workspace_name Display workspace name (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CustomWatermarkSetting
     */
    public function postWatermark($team_id, $custom_text, $color = '#333333', $opacity = '0.5', $font_size = '18', $rotation = '0', $hposition = 'center', $vposition = 'center', $display_user_name = 'true', $display_user_email = 'true', $display_ip_address = 'true', $display_time = 'true', $display_workspace_name = null)
    {
        list($response) = $this->postWatermarkWithHttpInfo($team_id, $custom_text, $color, $opacity, $font_size, $rotation, $hposition, $vposition, $display_user_name, $display_user_email, $display_ip_address, $display_time, $display_workspace_name);
        return $response;
    }

    /**
     * Operation postWatermarkWithHttpInfo
     *
     * Add custom watermark
     *
     * @param int $team_id ID of the team (required)
     * @param string $custom_text Custom watermark text (required)
     * @param string $color Hexadecimal color value (i.e. #eee, #e1e1e1) (optional, default to #333333)
     * @param float $opacity Opacity 0 to 1.0 (optional, default to 0.5)
     * @param int $font_size Font size in pixels (optional, default to 18)
     * @param int $rotation Rotation degrees (-90 to 90) (optional, default to 0)
     * @param string $hposition Horizontal position (left, center, right) (optional, default to center)
     * @param string $vposition Vertical position (top, center, bottom) (optional, default to center)
     * @param bool $display_user_name Display user name (optional, default to true)
     * @param bool $display_user_email Display user email address (optional, default to true)
     * @param bool $display_ip_address Display user IP address (optional, default to true)
     * @param bool $display_time Display time (optional, default to true)
     * @param bool $display_workspace_name Display workspace name (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CustomWatermarkSetting, HTTP status code, HTTP response headers (array of strings)
     */
    public function postWatermarkWithHttpInfo($team_id, $custom_text, $color = '#333333', $opacity = '0.5', $font_size = '18', $rotation = '0', $hposition = 'center', $vposition = 'center', $display_user_name = 'true', $display_user_email = 'true', $display_ip_address = 'true', $display_time = 'true', $display_workspace_name = null)
    {
        // verify the required parameter 'team_id' is set
        if ($team_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $team_id when calling postWatermark');
        }
        // verify the required parameter 'custom_text' is set
        if ($custom_text === null) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_text when calling postWatermark');
        }
        if (!is_null($font_size) && ($font_size > 100)) {
            throw new \InvalidArgumentException('invalid value for "$font_size" when calling WatermarkApi.postWatermark, must be smaller than or equal to 100.');
        }
        if (!is_null($font_size) && ($font_size < 2)) {
            throw new \InvalidArgumentException('invalid value for "$font_size" when calling WatermarkApi.postWatermark, must be bigger than or equal to 2.');
        }

        if (!is_null($rotation) && ($rotation > 90)) {
            throw new \InvalidArgumentException('invalid value for "$rotation" when calling WatermarkApi.postWatermark, must be smaller than or equal to 90.');
        }
        if (!is_null($rotation) && ($rotation < -90)) {
            throw new \InvalidArgumentException('invalid value for "$rotation" when calling WatermarkApi.postWatermark, must be bigger than or equal to -90.');
        }

        // parse inputs
        $resourcePath = "/watermark";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = $this->apiClient->getSerializer()->toFormValue($team_id);
        }
        // form params
        if ($custom_text !== null) {
            $formParams['custom_text'] = $this->apiClient->getSerializer()->toFormValue($custom_text);
        }
        // form params
        if ($color !== null) {
            $formParams['color'] = $this->apiClient->getSerializer()->toFormValue($color);
        }
        // form params
        if ($opacity !== null) {
            $formParams['opacity'] = $this->apiClient->getSerializer()->toFormValue($opacity);
        }
        // form params
        if ($font_size !== null) {
            $formParams['font_size'] = $this->apiClient->getSerializer()->toFormValue($font_size);
        }
        // form params
        if ($rotation !== null) {
            $formParams['rotation'] = $this->apiClient->getSerializer()->toFormValue($rotation);
        }
        // form params
        if ($hposition !== null) {
            $formParams['hposition'] = $this->apiClient->getSerializer()->toFormValue($hposition);
        }
        // form params
        if ($vposition !== null) {
            $formParams['vposition'] = $this->apiClient->getSerializer()->toFormValue($vposition);
        }
        // form params
        if ($display_user_name !== null) {
            $formParams['display_user_name'] = $this->apiClient->getSerializer()->toFormValue($display_user_name);
        }
        // form params
        if ($display_user_email !== null) {
            $formParams['display_user_email'] = $this->apiClient->getSerializer()->toFormValue($display_user_email);
        }
        // form params
        if ($display_ip_address !== null) {
            $formParams['display_ip_address'] = $this->apiClient->getSerializer()->toFormValue($display_ip_address);
        }
        // form params
        if ($display_time !== null) {
            $formParams['display_time'] = $this->apiClient->getSerializer()->toFormValue($display_time);
        }
        // form params
        if ($display_workspace_name !== null) {
            $formParams['display_workspace_name'] = $this->apiClient->getSerializer()->toFormValue($display_workspace_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomWatermarkSetting',
                '/watermark'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomWatermarkSetting', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomWatermarkSetting', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putWatermarkId
     *
     * Update custom watermark
     *
     * @param int $id ID of the watermark setting to update (required)
     * @param string $custom_text Custom watermark text (optional)
     * @param string $color Hexadecimal color value (i.e. #eee, #e1e1e1) (optional)
     * @param float $opacity Opacity 0 to 1.0 (optional)
     * @param int $font_size Font size in pixels (optional)
     * @param int $rotation Rotation degrees (-90 to 90) (optional)
     * @param string $hposition Horizontal position (left, center, right) (optional)
     * @param string $vposition Vertical position (top, center, bottom) (optional)
     * @param bool $display_user_name Display user name (optional)
     * @param bool $display_user_email Display user email address (optional)
     * @param bool $display_ip_address Display user IP address (optional)
     * @param bool $display_time Display time (optional)
     * @param bool $display_workspace_name Display workspace name (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CustomWatermarkSetting
     */
    public function putWatermarkId($id, $custom_text = null, $color = null, $opacity = null, $font_size = null, $rotation = null, $hposition = null, $vposition = null, $display_user_name = null, $display_user_email = null, $display_ip_address = null, $display_time = null, $display_workspace_name = null)
    {
        list($response) = $this->putWatermarkIdWithHttpInfo($id, $custom_text, $color, $opacity, $font_size, $rotation, $hposition, $vposition, $display_user_name, $display_user_email, $display_ip_address, $display_time, $display_workspace_name);
        return $response;
    }

    /**
     * Operation putWatermarkIdWithHttpInfo
     *
     * Update custom watermark
     *
     * @param int $id ID of the watermark setting to update (required)
     * @param string $custom_text Custom watermark text (optional)
     * @param string $color Hexadecimal color value (i.e. #eee, #e1e1e1) (optional)
     * @param float $opacity Opacity 0 to 1.0 (optional)
     * @param int $font_size Font size in pixels (optional)
     * @param int $rotation Rotation degrees (-90 to 90) (optional)
     * @param string $hposition Horizontal position (left, center, right) (optional)
     * @param string $vposition Vertical position (top, center, bottom) (optional)
     * @param bool $display_user_name Display user name (optional)
     * @param bool $display_user_email Display user email address (optional)
     * @param bool $display_ip_address Display user IP address (optional)
     * @param bool $display_time Display time (optional)
     * @param bool $display_workspace_name Display workspace name (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CustomWatermarkSetting, HTTP status code, HTTP response headers (array of strings)
     */
    public function putWatermarkIdWithHttpInfo($id, $custom_text = null, $color = null, $opacity = null, $font_size = null, $rotation = null, $hposition = null, $vposition = null, $display_user_name = null, $display_user_email = null, $display_ip_address = null, $display_time = null, $display_workspace_name = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling putWatermarkId');
        }
        if (!is_null($font_size) && ($font_size > 100)) {
            throw new \InvalidArgumentException('invalid value for "$font_size" when calling WatermarkApi.putWatermarkId, must be smaller than or equal to 100.');
        }
        if (!is_null($font_size) && ($font_size < 2)) {
            throw new \InvalidArgumentException('invalid value for "$font_size" when calling WatermarkApi.putWatermarkId, must be bigger than or equal to 2.');
        }

        if (!is_null($rotation) && ($rotation > 90)) {
            throw new \InvalidArgumentException('invalid value for "$rotation" when calling WatermarkApi.putWatermarkId, must be smaller than or equal to 90.');
        }
        if (!is_null($rotation) && ($rotation < -90)) {
            throw new \InvalidArgumentException('invalid value for "$rotation" when calling WatermarkApi.putWatermarkId, must be bigger than or equal to -90.');
        }

        // parse inputs
        $resourcePath = "/watermark/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($custom_text !== null) {
            $formParams['custom_text'] = $this->apiClient->getSerializer()->toFormValue($custom_text);
        }
        // form params
        if ($color !== null) {
            $formParams['color'] = $this->apiClient->getSerializer()->toFormValue($color);
        }
        // form params
        if ($opacity !== null) {
            $formParams['opacity'] = $this->apiClient->getSerializer()->toFormValue($opacity);
        }
        // form params
        if ($font_size !== null) {
            $formParams['font_size'] = $this->apiClient->getSerializer()->toFormValue($font_size);
        }
        // form params
        if ($rotation !== null) {
            $formParams['rotation'] = $this->apiClient->getSerializer()->toFormValue($rotation);
        }
        // form params
        if ($hposition !== null) {
            $formParams['hposition'] = $this->apiClient->getSerializer()->toFormValue($hposition);
        }
        // form params
        if ($vposition !== null) {
            $formParams['vposition'] = $this->apiClient->getSerializer()->toFormValue($vposition);
        }
        // form params
        if ($display_user_name !== null) {
            $formParams['display_user_name'] = $this->apiClient->getSerializer()->toFormValue($display_user_name);
        }
        // form params
        if ($display_user_email !== null) {
            $formParams['display_user_email'] = $this->apiClient->getSerializer()->toFormValue($display_user_email);
        }
        // form params
        if ($display_ip_address !== null) {
            $formParams['display_ip_address'] = $this->apiClient->getSerializer()->toFormValue($display_ip_address);
        }
        // form params
        if ($display_time !== null) {
            $formParams['display_time'] = $this->apiClient->getSerializer()->toFormValue($display_time);
        }
        // form params
        if ($display_workspace_name !== null) {
            $formParams['display_workspace_name'] = $this->apiClient->getSerializer()->toFormValue($display_workspace_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomWatermarkSetting',
                '/watermark/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomWatermarkSetting', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomWatermarkSetting', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
