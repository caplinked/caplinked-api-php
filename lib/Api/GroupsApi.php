<?php
/**
 * GroupsApi
 * PHP version 5
 *
 * @category Class
 * @package  Caplinked
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Caplinked\Api;

use \Caplinked\ApiClient;
use \Caplinked\ApiException;
use \Caplinked\Configuration;
use \Caplinked\ObjectSerializer;

/**
 * GroupsApi Class Doc Comment
 *
 * @category Class
 * @package  Caplinked
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupsApi
{
    /**
     * API Client
     *
     * @var \Caplinked\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Caplinked\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Caplinked\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Caplinked\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Caplinked\ApiClient $apiClient set the API client
     *
     * @return GroupsApi
     */
    public function setApiClient(\Caplinked\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteGroupsId
     *
     * Delete group
     *
     * @param int $id ID of group to update (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\GroupInfoDeleted
     */
    public function deleteGroupsId($id, $workspace_id)
    {
        list($response) = $this->deleteGroupsIdWithHttpInfo($id, $workspace_id);
        return $response;
    }

    /**
     * Operation deleteGroupsIdWithHttpInfo
     *
     * Delete group
     *
     * @param int $id ID of group to update (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\GroupInfoDeleted, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteGroupsIdWithHttpInfo($id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteGroupsId');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling deleteGroupsId');
        }
        // parse inputs
        $resourcePath = "/groups/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($workspace_id !== null) {
            $queryParams['workspace_id'] = $this->apiClient->getSerializer()->toQueryValue($workspace_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\GroupInfoDeleted',
                '/groups/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\GroupInfoDeleted', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\GroupInfoDeleted', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteGroupsIdMemberships
     *
     * Remove a user from a group
     *
     * @param int $id ID of the group you wish the user to be removed from (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @param int $user_id ID of the user to be removed from this group (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return void
     */
    public function deleteGroupsIdMemberships($id, $workspace_id, $user_id)
    {
        list($response) = $this->deleteGroupsIdMembershipsWithHttpInfo($id, $workspace_id, $user_id);
        return $response;
    }

    /**
     * Operation deleteGroupsIdMembershipsWithHttpInfo
     *
     * Remove a user from a group
     *
     * @param int $id ID of the group you wish the user to be removed from (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @param int $user_id ID of the user to be removed from this group (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteGroupsIdMembershipsWithHttpInfo($id, $workspace_id, $user_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteGroupsIdMemberships');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling deleteGroupsIdMemberships');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling deleteGroupsIdMemberships');
        }
        // parse inputs
        $resourcePath = "/groups/{id}/memberships";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($workspace_id !== null) {
            $queryParams['workspace_id'] = $this->apiClient->getSerializer()->toQueryValue($workspace_id);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/groups/{id}/memberships'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getGroups
     *
     * List all groups in workspace
     *
     * @param int $workspace_id ID of workspace from which to list groups (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\GroupInfo
     */
    public function getGroups($workspace_id)
    {
        list($response) = $this->getGroupsWithHttpInfo($workspace_id);
        return $response;
    }

    /**
     * Operation getGroupsWithHttpInfo
     *
     * List all groups in workspace
     *
     * @param int $workspace_id ID of workspace from which to list groups (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\GroupInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupsWithHttpInfo($workspace_id)
    {
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling getGroups');
        }
        // parse inputs
        $resourcePath = "/groups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($workspace_id !== null) {
            $queryParams['workspace_id'] = $this->apiClient->getSerializer()->toQueryValue($workspace_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\GroupInfo',
                '/groups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\GroupInfo', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\GroupInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getGroupsId
     *
     * Get group information
     *
     * @param int $id ID of group (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\GroupInfo
     */
    public function getGroupsId($id, $workspace_id)
    {
        list($response) = $this->getGroupsIdWithHttpInfo($id, $workspace_id);
        return $response;
    }

    /**
     * Operation getGroupsIdWithHttpInfo
     *
     * Get group information
     *
     * @param int $id ID of group (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\GroupInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupsIdWithHttpInfo($id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getGroupsId');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling getGroupsId');
        }
        // parse inputs
        $resourcePath = "/groups/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($workspace_id !== null) {
            $queryParams['workspace_id'] = $this->apiClient->getSerializer()->toQueryValue($workspace_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\GroupInfo',
                '/groups/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\GroupInfo', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\GroupInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getGroupsIdMemberships
     *
     * List all memberships for a group
     *
     * @param int $id ID of the group you want to list the members of (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\User
     */
    public function getGroupsIdMemberships($id, $workspace_id)
    {
        list($response) = $this->getGroupsIdMembershipsWithHttpInfo($id, $workspace_id);
        return $response;
    }

    /**
     * Operation getGroupsIdMembershipsWithHttpInfo
     *
     * List all memberships for a group
     *
     * @param int $id ID of the group you want to list the members of (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupsIdMembershipsWithHttpInfo($id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getGroupsIdMemberships');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling getGroupsIdMemberships');
        }
        // parse inputs
        $resourcePath = "/groups/{id}/memberships";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($workspace_id !== null) {
            $queryParams['workspace_id'] = $this->apiClient->getSerializer()->toQueryValue($workspace_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\User',
                '/groups/{id}/memberships'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\User', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\User', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postGroups
     *
     * Create group
     *
     * @param string $group_name Name of group (required)
     * @param int $group_workspace_id Workspace ID for the group (required)
     * @param bool $group_file_managing_abilities Enable file managing abililies for uploading users (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\GroupInfo
     */
    public function postGroups($group_name, $group_workspace_id, $group_file_managing_abilities = null)
    {
        list($response) = $this->postGroupsWithHttpInfo($group_name, $group_workspace_id, $group_file_managing_abilities);
        return $response;
    }

    /**
     * Operation postGroupsWithHttpInfo
     *
     * Create group
     *
     * @param string $group_name Name of group (required)
     * @param int $group_workspace_id Workspace ID for the group (required)
     * @param bool $group_file_managing_abilities Enable file managing abililies for uploading users (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\GroupInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function postGroupsWithHttpInfo($group_name, $group_workspace_id, $group_file_managing_abilities = null)
    {
        // verify the required parameter 'group_name' is set
        if ($group_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $group_name when calling postGroups');
        }
        // verify the required parameter 'group_workspace_id' is set
        if ($group_workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $group_workspace_id when calling postGroups');
        }
        // parse inputs
        $resourcePath = "/groups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // form params
        if ($group_name !== null) {
            $formParams['group[name]'] = $this->apiClient->getSerializer()->toFormValue($group_name);
        }
        // form params
        if ($group_workspace_id !== null) {
            $formParams['group[workspace_id]'] = $this->apiClient->getSerializer()->toFormValue($group_workspace_id);
        }
        // form params
        if ($group_file_managing_abilities !== null) {
            $formParams['group[file_managing_abilities]'] = $this->apiClient->getSerializer()->toFormValue($group_file_managing_abilities);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\GroupInfo',
                '/groups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\GroupInfo', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\GroupInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postGroupsIdMemberships
     *
     * Add user to group (adds to parent workspace if they are not already a member)
     *
     * @param int $id ID of the group you wish the user to be added to (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @param int $user_id ID of the user to be added to this group (required)
     * @param bool $send_email Send workspace invitation email to this user.  Defaults to true, use false if you do not want the email to be sent (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return void
     */
    public function postGroupsIdMemberships($id, $workspace_id, $user_id, $send_email = null)
    {
        list($response) = $this->postGroupsIdMembershipsWithHttpInfo($id, $workspace_id, $user_id, $send_email);
        return $response;
    }

    /**
     * Operation postGroupsIdMembershipsWithHttpInfo
     *
     * Add user to group (adds to parent workspace if they are not already a member)
     *
     * @param int $id ID of the group you wish the user to be added to (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @param int $user_id ID of the user to be added to this group (required)
     * @param bool $send_email Send workspace invitation email to this user.  Defaults to true, use false if you do not want the email to be sent (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postGroupsIdMembershipsWithHttpInfo($id, $workspace_id, $user_id, $send_email = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling postGroupsIdMemberships');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling postGroupsIdMemberships');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling postGroupsIdMemberships');
        }
        // parse inputs
        $resourcePath = "/groups/{id}/memberships";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }
        // form params
        if ($user_id !== null) {
            $formParams['user_id'] = $this->apiClient->getSerializer()->toFormValue($user_id);
        }
        // form params
        if ($send_email !== null) {
            $formParams['send_email'] = $this->apiClient->getSerializer()->toFormValue($send_email);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/groups/{id}/memberships'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation putGroupsId
     *
     * Update group
     *
     * @param int $id ID of group (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @param string $group_name Name of group (optional)
     * @param bool $group_file_managing_abilities Ability to delete, rename, and reindex files for uploading users (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\GroupInfo
     */
    public function putGroupsId($id, $workspace_id, $group_name = null, $group_file_managing_abilities = null)
    {
        list($response) = $this->putGroupsIdWithHttpInfo($id, $workspace_id, $group_name, $group_file_managing_abilities);
        return $response;
    }

    /**
     * Operation putGroupsIdWithHttpInfo
     *
     * Update group
     *
     * @param int $id ID of group (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @param string $group_name Name of group (optional)
     * @param bool $group_file_managing_abilities Ability to delete, rename, and reindex files for uploading users (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\GroupInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function putGroupsIdWithHttpInfo($id, $workspace_id, $group_name = null, $group_file_managing_abilities = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling putGroupsId');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling putGroupsId');
        }
        // parse inputs
        $resourcePath = "/groups/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }
        // form params
        if ($group_name !== null) {
            $formParams['group[name]'] = $this->apiClient->getSerializer()->toFormValue($group_name);
        }
        // form params
        if ($group_file_managing_abilities !== null) {
            $formParams['group[file_managing_abilities]'] = $this->apiClient->getSerializer()->toFormValue($group_file_managing_abilities);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\GroupInfo',
                '/groups/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\GroupInfo', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\GroupInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putGroupsIdDisableDrmExpiration
     *
     * Disable DRM expiration for group
     *
     * @param int $id ID of group to update (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\GroupInfo
     */
    public function putGroupsIdDisableDrmExpiration($id, $workspace_id)
    {
        list($response) = $this->putGroupsIdDisableDrmExpirationWithHttpInfo($id, $workspace_id);
        return $response;
    }

    /**
     * Operation putGroupsIdDisableDrmExpirationWithHttpInfo
     *
     * Disable DRM expiration for group
     *
     * @param int $id ID of group to update (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\GroupInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function putGroupsIdDisableDrmExpirationWithHttpInfo($id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling putGroupsIdDisableDrmExpiration');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling putGroupsIdDisableDrmExpiration');
        }
        // parse inputs
        $resourcePath = "/groups/{id}/disable_drm_expiration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\GroupInfo',
                '/groups/{id}/disable_drm_expiration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\GroupInfo', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\GroupInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putGroupsIdDisableExpireAccess
     *
     * Disable access expiration for a group
     *
     * @param int $id ID of group to update (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\GroupInfo
     */
    public function putGroupsIdDisableExpireAccess($id, $workspace_id)
    {
        list($response) = $this->putGroupsIdDisableExpireAccessWithHttpInfo($id, $workspace_id);
        return $response;
    }

    /**
     * Operation putGroupsIdDisableExpireAccessWithHttpInfo
     *
     * Disable access expiration for a group
     *
     * @param int $id ID of group to update (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\GroupInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function putGroupsIdDisableExpireAccessWithHttpInfo($id, $workspace_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling putGroupsIdDisableExpireAccess');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling putGroupsIdDisableExpireAccess');
        }
        // parse inputs
        $resourcePath = "/groups/{id}/disable_expire_access";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\GroupInfo',
                '/groups/{id}/disable_expire_access'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\GroupInfo', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\GroupInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putGroupsIdDrm
     *
     * Update DRM for group
     *
     * @param int $id ID of group to update (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @param string $group_drm_enabled Enable DRM for group (required)
     * @param \DateTime $group_drm_expires_after Expire DRM after this date. Format: yyyy-mm-dd (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\GroupInfo
     */
    public function putGroupsIdDrm($id, $workspace_id, $group_drm_enabled, $group_drm_expires_after = null)
    {
        list($response) = $this->putGroupsIdDrmWithHttpInfo($id, $workspace_id, $group_drm_enabled, $group_drm_expires_after);
        return $response;
    }

    /**
     * Operation putGroupsIdDrmWithHttpInfo
     *
     * Update DRM for group
     *
     * @param int $id ID of group to update (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @param string $group_drm_enabled Enable DRM for group (required)
     * @param \DateTime $group_drm_expires_after Expire DRM after this date. Format: yyyy-mm-dd (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\GroupInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function putGroupsIdDrmWithHttpInfo($id, $workspace_id, $group_drm_enabled, $group_drm_expires_after = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling putGroupsIdDrm');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling putGroupsIdDrm');
        }
        // verify the required parameter 'group_drm_enabled' is set
        if ($group_drm_enabled === null) {
            throw new \InvalidArgumentException('Missing the required parameter $group_drm_enabled when calling putGroupsIdDrm');
        }
        // parse inputs
        $resourcePath = "/groups/{id}/drm";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }
        // form params
        if ($group_drm_enabled !== null) {
            $formParams['group[drm_enabled]'] = $this->apiClient->getSerializer()->toFormValue($group_drm_enabled);
        }
        // form params
        if ($group_drm_expires_after !== null) {
            $formParams['group[drm_expires_after]'] = $this->apiClient->getSerializer()->toFormValue($group_drm_expires_after);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\GroupInfo',
                '/groups/{id}/drm'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\GroupInfo', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\GroupInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putGroupsIdEnableExpireAccess
     *
     * Enable access expiration for a group
     *
     * @param int $id ID of group to update (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @param \DateTime $group_expire_workspace_access_at Expire access on the following date. Format: yyyy-mm-dd (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\GroupInfo
     */
    public function putGroupsIdEnableExpireAccess($id, $workspace_id, $group_expire_workspace_access_at)
    {
        list($response) = $this->putGroupsIdEnableExpireAccessWithHttpInfo($id, $workspace_id, $group_expire_workspace_access_at);
        return $response;
    }

    /**
     * Operation putGroupsIdEnableExpireAccessWithHttpInfo
     *
     * Enable access expiration for a group
     *
     * @param int $id ID of group to update (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @param \DateTime $group_expire_workspace_access_at Expire access on the following date. Format: yyyy-mm-dd (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\GroupInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function putGroupsIdEnableExpireAccessWithHttpInfo($id, $workspace_id, $group_expire_workspace_access_at)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling putGroupsIdEnableExpireAccess');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling putGroupsIdEnableExpireAccess');
        }
        // verify the required parameter 'group_expire_workspace_access_at' is set
        if ($group_expire_workspace_access_at === null) {
            throw new \InvalidArgumentException('Missing the required parameter $group_expire_workspace_access_at when calling putGroupsIdEnableExpireAccess');
        }
        // parse inputs
        $resourcePath = "/groups/{id}/enable_expire_access";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }
        // form params
        if ($group_expire_workspace_access_at !== null) {
            $formParams['group[expire_workspace_access_at]'] = $this->apiClient->getSerializer()->toFormValue($group_expire_workspace_access_at);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\GroupInfo',
                '/groups/{id}/enable_expire_access'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\GroupInfo', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\GroupInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putGroupsIdWatermarking
     *
     * Watermarking for group
     *
     * @param int $id ID of group to update (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @param bool $group_watermarking Enable watermarking for group (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\GroupInfo
     */
    public function putGroupsIdWatermarking($id, $workspace_id, $group_watermarking)
    {
        list($response) = $this->putGroupsIdWatermarkingWithHttpInfo($id, $workspace_id, $group_watermarking);
        return $response;
    }

    /**
     * Operation putGroupsIdWatermarkingWithHttpInfo
     *
     * Watermarking for group
     *
     * @param int $id ID of group to update (required)
     * @param int $workspace_id Workspace ID for the group (required)
     * @param bool $group_watermarking Enable watermarking for group (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\GroupInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function putGroupsIdWatermarkingWithHttpInfo($id, $workspace_id, $group_watermarking)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling putGroupsIdWatermarking');
        }
        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_id when calling putGroupsIdWatermarking');
        }
        // verify the required parameter 'group_watermarking' is set
        if ($group_watermarking === null) {
            throw new \InvalidArgumentException('Missing the required parameter $group_watermarking when calling putGroupsIdWatermarking');
        }
        // parse inputs
        $resourcePath = "/groups/{id}/watermarking";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($workspace_id !== null) {
            $formParams['workspace_id'] = $this->apiClient->getSerializer()->toFormValue($workspace_id);
        }
        // form params
        if ($group_watermarking !== null) {
            $formParams['group[watermarking]'] = $this->apiClient->getSerializer()->toFormValue($group_watermarking);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\GroupInfo',
                '/groups/{id}/watermarking'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\GroupInfo', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\GroupInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
