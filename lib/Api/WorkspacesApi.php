<?php
/**
 * WorkspacesApi
 * PHP version 5
 *
 * @category Class
 * @package  Caplinked
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Caplinked\Api;

use \Caplinked\ApiClient;
use \Caplinked\ApiException;
use \Caplinked\Configuration;
use \Caplinked\ObjectSerializer;

/**
 * WorkspacesApi Class Doc Comment
 *
 * @category Class
 * @package  Caplinked
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkspacesApi
{
    /**
     * API Client
     *
     * @var \Caplinked\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Caplinked\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Caplinked\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Caplinked\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Caplinked\ApiClient $apiClient set the API client
     *
     * @return WorkspacesApi
     */
    public function setApiClient(\Caplinked\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getWorkspaces
     *
     * List all workspaces for a team
     *
     * @param int $team_id ID of team from which to list workspaces (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\Workspace
     */
    public function getWorkspaces($team_id)
    {
        list($response) = $this->getWorkspacesWithHttpInfo($team_id);
        return $response;
    }

    /**
     * Operation getWorkspacesWithHttpInfo
     *
     * List all workspaces for a team
     *
     * @param int $team_id ID of team from which to list workspaces (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\Workspace, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkspacesWithHttpInfo($team_id)
    {
        // verify the required parameter 'team_id' is set
        if ($team_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $team_id when calling getWorkspaces');
        }
        // parse inputs
        $resourcePath = "/workspaces";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($team_id !== null) {
            $queryParams['team_id'] = $this->apiClient->getSerializer()->toQueryValue($team_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\Workspace',
                '/workspaces'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\Workspace', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\Workspace', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkspacesId
     *
     * Get workspace information
     *
     * @param int $id ID of workspace (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\Workspace
     */
    public function getWorkspacesId($id)
    {
        list($response) = $this->getWorkspacesIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getWorkspacesIdWithHttpInfo
     *
     * Get workspace information
     *
     * @param int $id ID of workspace (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\Workspace, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkspacesIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getWorkspacesId');
        }
        // parse inputs
        $resourcePath = "/workspaces/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\Workspace',
                '/workspaces/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\Workspace', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\Workspace', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postWorkspaces
     *
     * Create workspace
     *
     * @param int $team_id ID of parent team for this workspace (required)
     * @param string $workspace_name Name of workspace to create (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\Workspace
     */
    public function postWorkspaces($team_id, $workspace_name)
    {
        list($response) = $this->postWorkspacesWithHttpInfo($team_id, $workspace_name);
        return $response;
    }

    /**
     * Operation postWorkspacesWithHttpInfo
     *
     * Create workspace
     *
     * @param int $team_id ID of parent team for this workspace (required)
     * @param string $workspace_name Name of workspace to create (required)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\Workspace, HTTP status code, HTTP response headers (array of strings)
     */
    public function postWorkspacesWithHttpInfo($team_id, $workspace_name)
    {
        // verify the required parameter 'team_id' is set
        if ($team_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $team_id when calling postWorkspaces');
        }
        // verify the required parameter 'workspace_name' is set
        if ($workspace_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workspace_name when calling postWorkspaces');
        }
        // parse inputs
        $resourcePath = "/workspaces";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = $this->apiClient->getSerializer()->toFormValue($team_id);
        }
        // form params
        if ($workspace_name !== null) {
            $formParams['workspace[name]'] = $this->apiClient->getSerializer()->toFormValue($workspace_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\Workspace',
                '/workspaces'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\Workspace', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\Workspace', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putWorkspacesId
     *
     * Update workspace
     *
     * @param int $id ID of workspace to update (required)
     * @param string $workspace_name Name of workspace to update (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return \Caplinked\Model\Workspace
     */
    public function putWorkspacesId($id, $workspace_name = null)
    {
        list($response) = $this->putWorkspacesIdWithHttpInfo($id, $workspace_name);
        return $response;
    }

    /**
     * Operation putWorkspacesIdWithHttpInfo
     *
     * Update workspace
     *
     * @param int $id ID of workspace to update (required)
     * @param string $workspace_name Name of workspace to update (optional)
     * @throws \Caplinked\ApiException on non-2xx response
     * @return array of \Caplinked\Model\Workspace, HTTP status code, HTTP response headers (array of strings)
     */
    public function putWorkspacesIdWithHttpInfo($id, $workspace_name = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling putWorkspacesId');
        }
        // parse inputs
        $resourcePath = "/workspaces/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($workspace_name !== null) {
            $formParams['workspace[name]'] = $this->apiClient->getSerializer()->toFormValue($workspace_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Caplinked\Model\Workspace',
                '/workspaces/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Caplinked\Model\Workspace', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Caplinked\Model\Workspace', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
